server:
  http_listen_port: 9080
  grpc_listen_port: 0

# File to store positions so that restarted promtail picks up where it left off.
positions:
  filename: /tmp/positions.yaml

clients:
  - url: "http://${MAIN_INSTANCE_PRIVATE_IP}/loki/api/v1/push"
    tenant_id: "default"
    external_labels:
      host: ${HOSTNAME}
    backoff_config:
      min_period: 500ms
      max_period: 10s
      max_retries: 10
    batchwait: 2s
    batchsize: 524288  # 512KB

scrape_configs:
  # System logs
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          host: client
          __path__: /var/log/{syslog,messages,dmesg,cloud-init.log}

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC

  # Agent containers (node-exporter, promtail, ping-agent)
  - job_name: agent-containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          app: monitoring
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
      - match:
          selector: '{container_name=~"node_exporter|promtail|ping_agent"}'
          stages:
            - labels:
                stream:
                container_name:

  # Application containers
  - job_name: application-containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
            image: attrs.image

      # Web application containers
      - match:
          selector: '{container_name=~"${WEBAPP_CONTAINER_PATTERN:.*}"}'
          stages:
            - labels:
                app: "webapp"
                service: "webapp"
                port: "${WEBAPP_PORT:-}"

      # Web server containers
      - match:
          selector: '{container_name=~"${WEBSERVER_CONTAINER_PATTERN:.*}"}'
          stages:
            - labels:
                app: "webserver"
                service: "webserver"
                port: "${WEBSERVER_PORT:-}"

      # Database containers
      - match:
          selector: '{container_name=~"${DATABASE_CONTAINER_PATTERN:.*}"}'
          stages:
            - labels:
                app: "database"
                service: "database"
                port: "${DATABASE_PORT:-}"

      # Custom container 1
      - match:
          selector: '{container_name=~"${CUSTOM_CONTAINER_1%%|*:.*}"}'
          stages:
            - labels:
                app: "${CUSTOM_CONTAINER_1#*|%%|*:-}"
                service: "${CUSTOM_CONTAINER_1#*|#*|:-}"
                port: "${CUSTOM_CONTAINER_1##*|:-}"

      # Custom container 2
      - match:
          selector: '{container_name=~"${CUSTOM_CONTAINER_2%%|*:.*}"}'
          stages:
            - labels:
                app: "${CUSTOM_CONTAINER_2#*|%%|*:-}"
                service: "${CUSTOM_CONTAINER_2#*|#*|:-}"
                port: "${CUSTOM_CONTAINER_2##*|:-}"

      # Add common labels for all containers
      - labels:
          stream:
          container_name:
          image:
