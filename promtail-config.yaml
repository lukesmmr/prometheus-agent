server:
  http_listen_port: 9080
  grpc_listen_port: 0

# File to store positions so that restarted promtail picks up where it left off.
positions:
  filename: /tmp/positions.yaml

clients:
  - url: "http://${MAIN_INSTANCE_PRIVATE_IP}:3100/loki/api/v1/push"
    tenant_id: "default"
    external_labels:
      host: ${HOSTNAME}
      friendly_name: "${FRIENDLY_NAME:-${HOSTNAME}}"
      node_type: "${NODE_TYPE:-unknown}"
      env: "${NODE_ENV:-unknown}"
    backoff_config:
      min_period: 500ms
      max_period: 10s
      max_retries: 10
    batchwait: 2s
    batchsize: 524288  # 512KB

scrape_configs:
  # System logs
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          host: ${HOSTNAME}
          friendly_name: "${FRIENDLY_NAME:-${HOSTNAME}}"
          node_type: "${NODE_TYPE:-unknown}"
          env: "${NODE_ENV:-unknown}"
          __path__: /var/log/{syslog,messages,dmesg,cloud-init.log}

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC

  # All Docker containers (including agents and applications)
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        target_label: container
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: stream
      - source_labels: ['__meta_docker_container_label_logging_jobname']
        target_label: job
        replacement: '${1:-docker}'
      - source_labels: ['__meta_docker_container_image']
        target_label: image

    pipeline_stages:
      - docker: {}
      
      # Add common labels
      - static_labels:
          host: ${HOSTNAME}
          friendly_name: "${FRIENDLY_NAME:-${HOSTNAME}}"
          node_type: "${NODE_TYPE:-unknown}"
          env: "${NODE_ENV:-unknown}"

      # Agent containers (node-exporter, promtail, ping-agent)
      - match:
          selector: '{container=~"node_exporter|promtail|ping_agent"}'
          stages:
            - static_labels:
                app: monitoring
                service: monitoring

      # Caddy container logs
      - match:
          selector: '{container=~".*caddy.*"}'
          stages:
            - json:
                expressions:
                  ts: ts
                  level: level
                  msg: msg
                  request: request
                  status: status
                  size: size
                  duration: duration
                  remote_ip: request.remote_ip
                  proto: request.proto
                  method: request.method
                  host: request.host
                  uri: request.uri
                  headers: request.headers
                  user_agent: request.headers."User-Agent"
            - labels:
                level:
                method:
                status:
                host:
            - timestamp:
                source: ts
                format: RFC3339Nano
            - static_labels:
                app: "webserver"
                service: "caddy"
                port: "${WEBSERVER_PORT:-}"

      # Web application containers
      - match:
          selector: '{container=~"${WEBAPP_CONTAINER_PATTERN:.*}"}'
          stages:
            - static_labels:
                app: "webapp"
                service: "webapp"
                port: "${WEBAPP_PORT:-}"

      # Web server containers (non-Caddy)
      - match:
          selector: '{container=~"${WEBSERVER_CONTAINER_PATTERN:.*}", container!~".*caddy.*"}'
          stages:
            - static_labels:
                app: "webserver"
                service: "webserver"
                port: "${WEBSERVER_PORT:-}"

      # Database containers
      - match:
          selector: '{container=~"${DATABASE_CONTAINER_PATTERN:.*}"}'
          stages:
            - static_labels:
                app: "database"
                service: "database"
                port: "${DATABASE_PORT:-}"

      # Custom container 1
      - match:
          selector: '{container=~"${CUSTOM_CONTAINER_1%%|*:.*}"}'
          stages:
            - static_labels:
                app: "${CUSTOM_CONTAINER_1#*|%%|*:-}"
                service: "${CUSTOM_CONTAINER_1#*|#*|:-}"
                port: "${CUSTOM_CONTAINER_1##*|:-}"

      # Custom container 2
      - match:
          selector: '{container=~"${CUSTOM_CONTAINER_2%%|*:.*}"}'
          stages:
            - static_labels:
                app: "${CUSTOM_CONTAINER_2#*|%%|*:-}"
                service: "${CUSTOM_CONTAINER_2#*|#*|:-}"
                port: "${CUSTOM_CONTAINER_2##*|:-}"
