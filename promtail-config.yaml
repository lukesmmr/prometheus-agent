server:
  http_listen_port: 9080
  grpc_listen_port: 0

# File to store positions so that restarted promtail picks up where it left off.
positions:
  filename: /tmp/positions.yaml

clients:
  - url: "http://${MAIN_INSTANCE_PRIVATE_IP}:3100/loki/api/v1/push"
    tenant_id: "default"

scrape_configs:
  # Scrape system logs from /var/log
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          host: client
          __path__: /var/log/{syslog,messages,dmesg,cloud-init.log}

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC

  # Node-exporter container
  - job_name: node-exporter
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          container: node_exporter
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
      - match:
          selector: '{container_name="node_exporter"}'
          stages:
            - labels:
                stream:

  # Promtail container
  - job_name: promtail
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          container: promtail
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
      - match:
          selector: '{container_name="promtail"}'
          stages:
            - labels:
                stream:

  # Ping-agent container
  - job_name: ping-agent
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          container: ping_agent
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
      - match:
          selector: '{container_name="ping_agent"}'
          stages:
            - labels:
                stream:

  # DB container
  - job_name: db
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          host: client
          container: mongodb
          __path__: /var/lib/docker/containers/*/*-json.log

    pipeline_stages:
      - timestamp:
          source: time
          format: RFC3339Nano
          fallback_formats:
            - RFC3339
            - UnixMs
          location: UTC
      - json:
          expressions:
            log: log
            stream: stream
            container_name: attrs.name
      - match:
          selector: '{container_name="mongodb"}'
          stages:
            - labels:
                stream:
